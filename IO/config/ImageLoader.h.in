#ifndef _IMAGE_LOADER_H_
#define _IMAGE_LOADER_H_

#include "ImageFileFormat.h"
#include "TexCompTypes.h"

class ImageLoader {

 protected:

  uint32 m_Width;
  uint32 m_Height;

  uint32 m_RedChannelPrecision;
  uint8 *m_RedData;

  uint32 m_GreenChannelPrecision;
  uint8 *m_GreenData;
  
  uint32 m_BlueChannelPrecision;
  uint8 *m_BlueData;
 
  uint32 m_AlphaChannelPrecision;
  uint8 *m_AlphaData;

  uint8 *m_PixelData;
  const uint8 *const m_RawData;

  ImageLoader(const uint8 *rawData) 
  : m_RawData(rawData)
  , m_PixelData(0)
  , m_Width(0), m_Height(0)
  , m_RedChannelPrecision(0), m_RedData(0)
  , m_GreenChannelPrecision(0), m_GreenData(0)
  , m_BlueChannelPrecision(0), m_BlueData(0)
  , m_AlphaChannelPrecision(0), m_AlphaData(0)
    { }

  uint32 GetChannelForPixel(uint32 x, uint32 y, uint32 ch);

 public:
  virtual ~ImageLoader() {
    if(m_RedData) {
      delete [] m_RedData;
      m_RedData = 0;
    }

    if(m_GreenData) {
      delete [] m_GreenData;
      m_GreenData = 0;
    }

    if(m_BlueData) {
      delete [] m_BlueData;
      m_BlueData = 0;
    }

    if(m_AlphaData) {
      delete [] m_AlphaData;
      m_AlphaData = 0;
    }
  }

  virtual bool ReadData() = 0;

  uint32 GetRedChannelPrecision() const { return m_RedChannelPrecision; }
  const uint8 * GetRedPixelData() const { return m_RedData; }

  uint32 GetGreenChannelPrecision() const { return m_GreenChannelPrecision; }
  const uint8 * GetGreenPixelData() const { return m_GreenData; }

  uint32 GetBlueChannelPrecision() const { return m_BlueChannelPrecision; }
  const uint8 * GetBluePixelData() const { return m_BlueData; }

  uint32 GetAlphaChannelPrecision() const { return m_AlphaChannelPrecision; }
  const uint8 * GetAlphaPixelData() const { return m_AlphaData; }

  uint32 GetWidth() const { return m_Width; }
  uint32 GetHeight() const { return m_Height; }
  uint32 GetImageDataSz() const { return m_Width * m_Height * 4; }

  bool LoadImage();
  const uint8 *GetImageData() const { return m_PixelData; }
};

#cmakedefine PNG_FOUND

#endif // _IMAGE_LOADER_H_
