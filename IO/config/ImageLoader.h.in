/* FasTC
 * Copyright (c) 2012 University of North Carolina at Chapel Hill. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation for educational, 
 * research, and non-profit purposes, without fee, and without a written agreement is hereby granted, 
 * provided that the above copyright notice, this paragraph, and the following four paragraphs appear 
 * in all copies.
 *
 * Permission to incorporate this software into commercial products may be obtained by contacting the 
 * authors or the Office of Technology Development at the University of North Carolina at Chapel Hill <otd@unc.edu>.
 *
 * This software program and documentation are copyrighted by the University of North Carolina at Chapel Hill. 
 * The software program and documentation are supplied "as is," without any accompanying services from the 
 * University of North Carolina at Chapel Hill or the authors. The University of North Carolina at Chapel Hill 
 * and the authors do not warrant that the operation of the program will be uninterrupted or error-free. The 
 * end-user understands that the program was developed for research purposes and is advised not to rely 
 * exclusively on the program for any reason.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL OR THE AUTHORS BE LIABLE TO ANY PARTY FOR 
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE 
 * USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL OR THE 
 * AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL AND THE AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY 
 * STATUTORY WARRANTY OF NON-INFRINGEMENT. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY 
 * OF NORTH CAROLINA AT CHAPEL HILL AND THE AUTHORS HAVE NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, 
 * ENHANCEMENTS, OR MODIFICATIONS.
 *
 * Please send all BUG REPORTS to <pavel@cs.unc.edu>.
 *
 * The authors may be contacted via:
 *
 * Pavel Krajcevski
 * Dept of Computer Science
 * 201 S Columbia St
 * Frederick P. Brooks, Jr. Computer Science Bldg
 * Chapel Hill, NC 27599-3175
 * USA
 * 
 * <http://gamma.cs.unc.edu/FasTC/>
 */

#ifndef _IMAGE_LOADER_H_
#define _IMAGE_LOADER_H_

#include "ImageFileFormat.h"
#include "TexCompTypes.h"

class ImageLoader {

 protected:

  const uint8 *const m_RawData;
  const int32 m_NumRawDataBytes;
  uint8 *m_PixelData;

  uint32 m_Width;
  uint32 m_Height;

  uint32 m_RedChannelPrecision;
  uint8 *m_RedData;

  uint32 m_GreenChannelPrecision;
  uint8 *m_GreenData;
  
  uint32 m_BlueChannelPrecision;
  uint8 *m_BlueData;
 
  uint32 m_AlphaChannelPrecision;
  uint8 *m_AlphaData;

  ImageLoader(const uint8 *rawData) 
  : m_RawData(rawData)
  , m_NumRawDataBytes(-1)
  , m_PixelData(0)
  , m_Width(0), m_Height(0)
  , m_RedChannelPrecision(0), m_RedData(0)
  , m_GreenChannelPrecision(0), m_GreenData(0)
  , m_BlueChannelPrecision(0), m_BlueData(0)
  , m_AlphaChannelPrecision(0), m_AlphaData(0)
    { }

  ImageLoader(const uint8 *rawData, const int32 numBytes)
  : m_RawData(rawData)
  , m_NumRawDataBytes(numBytes)
  , m_PixelData(0)
  , m_Width(0), m_Height(0)
  , m_RedChannelPrecision(0), m_RedData(0)
  , m_GreenChannelPrecision(0), m_GreenData(0)
  , m_BlueChannelPrecision(0), m_BlueData(0)
  , m_AlphaChannelPrecision(0), m_AlphaData(0)
    { }

  uint32 GetChannelForPixel(uint32 x, uint32 y, uint32 ch);

 public:
  virtual ~ImageLoader() {
    if(m_RedData) {
      delete [] m_RedData;
      m_RedData = 0;
    }

    if(m_GreenData) {
      delete [] m_GreenData;
      m_GreenData = 0;
    }

    if(m_BlueData) {
      delete [] m_BlueData;
      m_BlueData = 0;
    }

    if(m_AlphaData) {
      delete [] m_AlphaData;
      m_AlphaData = 0;
    }
    
    if(m_PixelData) {
      delete [] m_PixelData;
      m_PixelData = 0;
    }
  }

  virtual bool ReadData() = 0;

  uint32 GetRedChannelPrecision() const { return m_RedChannelPrecision; }
  const uint8 * GetRedPixelData() const { return m_RedData; }

  uint32 GetGreenChannelPrecision() const { return m_GreenChannelPrecision; }
  const uint8 * GetGreenPixelData() const { return m_GreenData; }

  uint32 GetBlueChannelPrecision() const { return m_BlueChannelPrecision; }
  const uint8 * GetBluePixelData() const { return m_BlueData; }

  uint32 GetAlphaChannelPrecision() const { return m_AlphaChannelPrecision; }
  const uint8 * GetAlphaPixelData() const { return m_AlphaData; }

  uint32 GetWidth() const { return m_Width; }
  uint32 GetHeight() const { return m_Height; }
  uint32 GetImageDataSz() const { return m_Width * m_Height * 4; }

  bool LoadImage();
  const uint8 *GetImageData() const { return m_PixelData; }
};

#ifndef PNG_FOUND
#cmakedefine PNG_FOUND
#endif // PNG_FOUND

#ifndef PVRTEXLIB_FOUND
#cmakedefine PVRTEXLIB_FOUND
#endif // PVRTEXLIB_FOUND

#endif // _IMAGE_LOADER_H_
